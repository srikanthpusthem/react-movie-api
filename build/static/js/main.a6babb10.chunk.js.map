{"version":3,"sources":["components/AddMovie.module.css","components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","components/AddMovie.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","release","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","fetch","response","ok","Error","json","data","console","log","loadedMovies","push","message","method","body","JSON","stringify","headers","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","createRoot","document","getElementById","render"],"mappings":";4HACAA,EAAOC,QAAU,CAAC,QAAU,4B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,2LCajBC,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,gBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAMS,QACnBN,YAAaH,EAAMG,mB,gBC6BdO,MAtCf,SAAkBb,GAChB,IAAMc,EAAWC,iBAAO,IAClBC,EAAiBD,iBAAO,IACxBE,EAAiBF,iBAAO,IAgB9B,OACE,0BAAMG,SAfR,SAAuBC,GACrBA,EAAMC,iBAIN,IAAMjB,EAAQ,CACZC,MAAOU,EAASO,QAAQC,MACxBhB,YAAaU,EAAeK,QAAQC,MACpCjB,YAAaY,EAAeI,QAAQC,OAGtCtB,EAAMuB,WAAWpB,KAKf,yBAAKF,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOf,GAAG,QAAQgB,IAAKb,KAErC,yBAAKb,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,gBAAf,gBACA,8BAAUG,KAAK,IAAIjB,GAAG,eAAegB,IAAKX,KAE5C,yBAAKf,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,QAAf,gBACA,2BAAOC,KAAK,OAAOf,GAAG,OAAOgB,IAAKV,KAEpC,+C,+yMC0DSY,MAzFf,WACE,MAA4BC,mBAAS,IAArC,mBAAOtB,EAAP,KAAeuB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAqBC,sBAAW,sBAAC,iGACrCJ,GAAa,GACbE,EAAS,MAF4B,kBAKZG,MACrB,yEANiC,WAK7BC,EAL6B,QAQrBC,GARqB,sBAS3B,IAAIC,MAAM,yBATiB,wBAYhBF,EAASG,OAZO,QAenC,IAAWhC,KAHLiC,EAZ6B,OAanCC,QAAQC,IAAIF,GACNG,EAAe,GACHH,EAChBG,EAAaC,KAAK,CAChBpC,GAAID,EACJN,MAAOuC,EAAKjC,GAAKN,MACjBE,YAAaqC,EAAKjC,GAAKJ,YACvBD,YAAasC,EAAKjC,GAAKL,cAa3B0B,EAAUe,GAjCyB,kDAmCnCX,EAAS,KAAMa,SAnCoB,QAqCrCf,GAAa,GArCwB,0DAsCpC,IA3CU,4CAiDb,WAA+B9B,GAA/B,yFACyBmC,MACrB,wEACA,CACEW,OAAQ,OACRC,KAAMC,KAAKC,UAAUjD,GACrBkD,QAAS,CAAE,eAAgB,sBANjC,cACQd,EADR,gBASqBA,EAASG,OAT9B,OASQC,EATR,OAUEC,QAAQC,IAAIF,GAVd,4CAjDa,sBA6CbW,qBAAU,WACRlB,MACC,CAACA,IAeJ,IAAImB,EAAU,+CAcd,OAZI/C,EAAOgD,OAAS,IAClBD,EAAU,kBAACE,EAAD,CAAYjD,OAAQA,KAG5B0B,IACFqB,EAAU,2BAAIrB,IAGZF,IACFuB,EAAU,0CAIV,kBAAC,IAAMG,SAAP,KACE,iCACE,kBAAC,EAAD,CAAUnC,WA/EH,+CAiFT,iCACE,4BAAQoC,QAASvB,GAAjB,iBAEF,iCAAUmB,KCpFHK,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,kBAAC,EAAD,S","file":"static/js/main.a6babb10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__3dgt9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__11g-n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__5V8ry\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.release}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from 'react';\n\nimport classes from './AddMovie.module.css';\n\nfunction AddMovie(props) {\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='title'>Title</label>\n        <input type='text' id='title' ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='opening-text'>Opening Text</label>\n        <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='date'>Release Date</label>\n        <input type='text' id='date' ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n}\n\nexport default AddMovie;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // const response = await fetch('https://swapi.dev/api/films/');\n      const response = await fetch(\n        \"https://react-api-calls-dc5a7-default-rtdb.firebaseio.com/movies.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedMovies = [];\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n        });\n      }\n\n      // const transformedMovies = data.results.map((movieData) => {\n      //   return {\n      //     id: movieData.episode_id,\n      //     title: movieData.title,\n      //     openingText: movieData.opening_crawl,\n      //     releaseDate: movieData.release_date,\n      //   };\n      // });\n      // setMovies(transformedMovies);\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\n      \"https://react-api-calls-dc5a7-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}